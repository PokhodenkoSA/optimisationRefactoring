#include <iostream>
#include "CADCFDOptimisation.h"
#include "NSPCC_Cases_Run.h"
#include "CADCFDOptimisation_NSPCC.h"
//#include <fenv.h>

using namespace std;

void Test(){
     //   vector<double> x = {1,1};
//   RunOptimisationGCConstantStep(x);


//
     //  vector<double>a={5,5};
     // OCCTDataProvider occtDataProvider(a);
//
//    //occtDataProvider.StepWriter("/home/orestmykhaskiv/QMUL/mgoptCustomCases/pipeLow/trashCAD/PipeCorkedLow.stp");
//
     //   MgoptSolver mgoptSolver("/home/orestmykhaskiv/QMUL/mgopt/bin","/home/orestmykhaskiv/QMUL/mgoptCustomCases/pipeLow","pipeLow.json");
//    mgoptSolver.GetSensitivity();
////
     //  auto designTable = mgoptSolver.GetDesignTable();
     // auto meshTable = mgoptSolver.GetMeshTable();
//
//
     //occtDataProvider.SetMeshes(meshTable,designTable);


//     optimiser.occt.StepWriter((optimiser.mgopt.CasePath + "/currentStepMarhch21-FixedLegs.stp").c_str());
//     optimiser.mgopt.BackupSolution("/optimisation/CFD","test2");
     //optimiser.mgopt.GetCostFunctionValue();
   //  optimiser.occt.StepWriter((optimiser.mgopt.CasePath + "/currentStep.stp").c_str());
//       CADCFDOptimisation optimiser;
//       optimiser.CompareFullLoopAD_FD_Central({0,10,15,20,50,90});

//     optimiser.CompareFullLoopAD_FD_Central(0);

//     auto designTable = optimiser.mgopt.GetDesignTable();
//     auto meshTable = optimiser.mgopt.GetMeshTable();
////
//      optimiser.occt.SetMeshes(meshTable, designTable);
//     cout << optimiser.DesignStepMeshToCAD() << endl;

    // optimiser.WriteCadSensitivity({0,6,30,32,24});

//
//     optimiser.WriteCadSensitivity(35);
     // optimiser.RunCADCFDOptimisationConstantStep();

//    vector<vector<double>> displ(table.capacity(), vector<double>(table[0].capacity()));
//    for (int i=0; i < table.capacity(); i++)
//        for (int j=0;j<table[0].capacity(); j++)
//            displ[i][j]=-0.005;
//
//    mgoptSolver.PopulateDisplacementsTable(displ,designTable);
//    mgoptSolver.RunSolverByMode(7);

     //CADCFDOptimisation optimiser("-0.0484624 0.0378187 -0.0432819 0.0392662 -0.0438593 0.0377255 -0.0415824 0.0384728 -0.0204291 0.0376095 -0.0211278 0.041957 -0.0210825 0.0364348 -0.0200099 0.031441 0.0196507 0.0395615 0.0198258 0.0441776 0.0196045 0.0382947 0.0193515 0.0346278 0.0496381 0.0362152 0.044278 0.0343258 0.0428785 0.0336168 0.0413345 0.0400312 0.0511983 0.0167953 0.0451127 0.0162891 0.0434387 0.0175336 0.0428983 0.0225456 0.0428969 -0.0210932 0.0379298 -0.0217938 0.040998 -0.0209128 0.042237 -0.0181585 0.0374044 -0.03658 0.036371 -0.0381229 0.0373431 -0.0371793 0.0339052 -0.0418194 0.0195648 -0.0345427 0.0172626 -0.0393645 0.0169635 -0.0377712 0.0213398 -0.0415688 -0.0195397 -0.0356071 -0.0222881 -0.0385394 -0.0231252 -0.0370752 -0.0184718 -0.0426655 -0.0340245 -0.0365982 -0.0343964 -0.0391421 -0.0358102 -0.0368927 -0.0361172 -0.0369445 -0.0428295 -0.0201968 -0.0376464 -0.0206812 -0.0405062 -0.0217859 -0.0405759 -0.0191701 -0.0522159 0.0173244 -0.0455128 0.0173552 -0.043382 0.0182032 -0.0419787 0.0221556");
  //   CADCFDOptimisation optimiser("-0.0427828 0.0371591 -0.0452515 0.0411624 -0.0420033 0.0418734 -0.0373663 0.0374378 -0.0187352 0.0367172 -0.018356 0.0420437 -0.0182044 0.0398456 -0.0186567 0.0372026 0.0187357 0.0367181 0.0183597 0.0420398 0.0182066 0.0398389 0.018657 0.0372015 0.042784 0.0371197 0.0452565 0.0411031 0.0419996 0.0418882 0.0373695 0.0374656 0.0445524 0.0185949 0.0521745 0.0184574 0.0471368 0.0186156 0.0380257 0.0188197 0.0452352 -0.019117 0.0534449 -0.0193124 0.0498855 -0.0193284 0.0395721 -0.0189157 0.040925 -0.0388331 0.0443561 -0.0380108 0.0476604 -0.0451672 0.0404741 -0.0406555 0.0189976 -0.0429759 0.0190263 -0.0411966 0.0189363 -0.0475333 0.0187984 -0.0416912 -0.0189979 -0.0429748 -0.019026 -0.0412012 -0.018935 -0.0475392 -0.0187981 -0.0416918 -0.0409249 -0.0388301 -0.0443545 -0.0380241 -0.0476592 -0.0451844 -0.0404736 -0.0406569 -0.0452357 -0.019117 -0.053448 -0.0193127 -0.0498893 -0.0193288 -0.0395721 -0.018916 -0.0445536 0.0185947 -0.0521771 0.0184572 -0.0471404 0.0186155 -0.0380261 0.0188196");

//     optimiser.CompareFullLoopAD_FD_Central({0,1,30,32,50,61,92});
//     string iterationStepFile = optimiser.mgopt.CasePath +"/optimisation/CAD/testDesign.stp";
//     optimiser.occt.StepWriter(iterationStepFile.c_str());

    // optimiser.occt.StepWriter(optimiser.mgopt.CasePath +"/optimisation/CAD/currentDesign_\" + std::to_string(k) + \".stp\";")

//     CADCFDOptimisation optimiser;

//    optimiser.CompareFullLoopAD_FD_Central({0,30,60});
////     optimiser.occt.designParameters[32]+=0.05;
////
//     optimiser.occt.BuildShape();
//     optimiser.occt.StepWriter((optimiser.mgopt.CasePath + "/Param0Pertubed.stp").c_str());

  //   SVDTest();
    //
    occtContinuityConstraints constraintstest("/home/orestmykhaskiv/QMUL/programs/DLR_F6/Real_Fairing/initialStep/fuselageWing_Sewed.stp");
    auto shape =  constraintstest.generalFuse(constraintstest.facemap(3), constraintstest.facemap(4));
    constraintstest.myShape = shape;

       constraintstest.SewShape();
    constraintstest.BuildConnectivity();
    constraintstest.StepWriter("/home/orestmykhaskiv/QMUL/programs/DLR_F6/Real_Fairing/initialStep/2faces.stp");

    constraintstest.AnalyseShape();

 }

void Optimisation_Parametric(){
    // CADCFDOptimisation optimiser("-0.0443115 0.0379214 -0.048827 0.044312 -0.0475013 0.0465108 -0.0426249 0.0413153 -0.018873 0.0392868 -0.0182388 0.0432913 -0.018138 0.0416024 -0.0187177 0.044364 0.0188793 0.0392881 0.0182436 0.0432986 0.0181386 0.0416048 0.018719 0.0443615 0.044304 0.0378845 0.0488283 0.0441474 0.0474899 0.0464648 0.0426239 0.0413345 0.0559877 0.0176032 0.0606362 0.0181439 0.0511849 0.0189462 0.0409588 0.019144 0.056111 -0.0203902 0.0594229 -0.0196934 0.0546736 -0.0203221 0.0410407 -0.0192609 0.0361625 -0.0280904 0.041148 -0.0268411 0.0546465 -0.0496236 0.0407609 -0.0417819 0.020991 -0.0368336 0.0211641 -0.0359649 0.0196247 -0.0643225 0.0189788 -0.0497219 -0.0209919 -0.0368309 -0.0211639 -0.0359631 -0.0196238 -0.0643212 -0.0189784 -0.0497228 -0.03616 -0.0280826 -0.0411444 -0.0268419 -0.0546472 -0.0496272 -0.0407591 -0.0417848 -0.0561158 -0.02039 -0.0594254 -0.0196934 -0.0546732 -0.0203233 -0.0410384 -0.0192612 -0.0559975 0.0176028 -0.0606406 0.0181435 -0.0511859 0.0189464 -0.0409591 0.019144");
   // optimiser.CompareFullLoopAD_FD_Central({0,30,51,92});

  //  CADCFDOptimisation optimiser("-0.0538318 0.0491574 -0.0445293 0.0522579 -0.0351479 0.0441958 -0.0361118 0.0421401 -0.0191493 0.0510164 -0.0177591 0.0493401 -0.0173972 0.0380173 -0.0188515 0.0461697 0.0191648 0.0510296 0.0177778 0.0493664 0.0174115 0.0379669 0.0188553 0.0461513 0.0538642 0.0491516 0.0445521 0.0521689 0.0351249 0.0441249 0.0361652 0.0421887 0.0678829 0.0189221 0.0722922 0.0193177 0.0525608 0.0169364 0.0392195 0.0180091 0.0704887 -0.0204971 0.0789681 -0.0185625 0.065574 -0.0236073 0.0452105 -0.0213066 0.0369575 -0.0229707 0.0497196 -0.022972 0.0703815 -0.0615158 0.0516061 -0.0471192 0.0211742 -0.0398652 0.0220161 -0.030582 0.0216141 -0.0644135 0.0199148 -0.0479712 -0.0211891 -0.0398665 -0.0220054 -0.0306065 -0.0215953 -0.0644617 -0.0199171 -0.047989 -0.0369931 -0.0229441 -0.0497343 -0.0229925 -0.0703584 -0.0616559 -0.0516034 -0.0471705 -0.0704764 -0.0204905 -0.07898 -0.0185692 -0.0656191 -0.023623 -0.0452267 -0.0213128 -0.0678934 0.0189279 -0.0723093 0.0193109 -0.0526005 0.0169275 -0.0392335 0.0180065");
  //  optimiser.CompareFullLoopAD_FD_Central({0,30,60,34});
  //  optimiser.CompareFullLoopAD_FD_Central({60,0});
  // optimiser.FindAndWriteProjections();
    CADCFDOptimisation optimiser("-0.0391466 0.0403007 -0.0403763 0.0462577 -0.0414178 0.0381884 -0.0410205 0.0351666 -0.0188023 0.0455032 -0.018961 0.0554552 -0.0188573 0.0379199 -0.018753 0.0362516 0.0188061 0.0455313 0.0189687 0.0555 0.0188553 0.0378662 0.018752 0.0362324 0.0391605 0.0403425 0.0403345 0.0463429 0.0414425 0.0381152 0.041049 0.0351148 0.0402516 0.018764 0.0448563 0.0187742 0.0467711 0.018828 0.0425193 0.0188033 0.0412474 -0.0187522 0.0457129 -0.0187658 0.0464936 -0.0187801 0.0424635 -0.0187645 0.0405909 -0.0410427 0.042157 -0.0402944 0.0438559 -0.041352 0.0419227 -0.04096 0.0187588 -0.0423419 0.0187582 -0.0402695 0.0187591 -0.0421227 0.0187589 -0.0419748 -0.018759 -0.0423393 -0.0187582 -0.0402585 -0.0187592 -0.042122 -0.0187589 -0.0419753 -0.040589 -0.0410218 -0.0421497 -0.0402675 -0.0438638 -0.0413527 -0.0419262 -0.0409618 -0.041273 -0.0187524 -0.0457347 -0.0187659 -0.0464977 -0.0187804 -0.0424635 -0.0187643 -0.0402821 0.0187648 -0.0449101 0.0187764 -0.0467558 0.0188272 -0.0425046 0.0188032");
   // optimiser.occt.StepWriter("/home/orestmykhaskiv/QMUL/mgoptCustomCases/06_28_16_UBend_ONEMoving/readyRejishSettings/stepTest.stp");
   // optimiser.FindAndWriteProjections();
    optimiser.RunCADCFDOptimisationWithLineSearch(false);
}

void UbendOptimisation_NSPCC(){
  //  Settings_Optimisation_UbendX_NSPCC settings;
    CADCFDOptimisation_NSPCC optimiser(true);
    optimiser.nspcc_cad.AnalyseShape();
   optimiser.SetMeshOnCAD(false);
  //  optimiser.nspcc_cad.SensitivityBasedInsertion(optimiser.settings.sensitivityKnotIndexes);
  //  optimiser.nspcc_cad.ManualVKnotInsertion({0,0.02,0.04,0.96,0.98,1});
 //   optimiser.nspcc_cad.ManualVKnotInsertion({0.17,0.173, 0.176,0.174,0.79,0.82,0.85});
   // optimiser.nspcc_cad.StepWriter(optimiser.settings.nspcc__cadfile_updated);
    //optimiser.nspcc_cad.PrintCP_Udistribution(1);
   // optimiser.nspcc_cad.PrintCP_XDistribution(1);
    //optimiser.nspcc_cad.ManualUKnotInsertion({1.921903});

   // cout << "after update" << endl;
 ///   optimiser.nspcc_cad.PrintCP_XDistribution(1);

  //  optimiser.nspcc_cad.StepWriter(optimiser.settings.nspcc__cadfile_updated);
  //  optimiser.nspcc_cad.PrintCP_Udistribution(1);

    optimiser.RunNSPCCOptimisation_SteepestDescent();
}

void RunRegression(){

 }


int main(int argc, char* argv[]) {
//  feenableexcept(FE_INVALID | FE_OVERFLOW);
//    UbendOptimisation_NSPCC();
  //  TestingNSPCC_Halfcylinder();
   //   TestingNSPCC_Stator();
  //  TestingNSPCC_WingFaces();
  //  TestingNSPCC_Ubend();
     //Test();
    //   Optimisation_Parametric();
  //string params = "-0.042800069905868085 0.037173201483390567 -0.045257996482529539 0.041188125073397211 -0.041999579948609408 0.041875439572181906 -0.03736395791774387 0.037437410182331279 -0.018735285559079721 0.036720124869402196 -0.018355909564202768 0.042049774216917662 -0.018203902003537623 0.039830198637193746 -0.018656351135840507 0.037200213510592585 0.018735675415625715 0.03671770817750699 0.018358477006062721 0.042037084038539424 0.018206084308169421 0.039808386216178014 0.018657395782881007 0.037192273803334279 0.042795317983439413 0.037128249377535019 0.045256503245403701 0.04111094631885738 0.041975764340007486 0.041850144705696167 0.037355823897265494 0.037446480771155519 0.044553213248568639 0.018595488693192705 0.052176265644233832 0.018457668022805546 0.047124101841453991 0.018613668279356187 0.038015824158758989 0.018818063194804568 0.045228773563299893 -0.019116813368140258 0.053447718260475084 -0.019312618424948476 0.049875509738971403 -0.019328794691010693 0.039567628110185112 -0.018916340305268484 0.04092444329270211 -0.038843493410706961 0.044368761599772454 -0.038033883223484735 0.047654820526095452 -0.045155553978952739 0.0404756690410581 -0.040648048939283629 0.018995442600184813 -0.042986002656019158 0.019024583417385599 -0.041208743528371221 0.018935873328224398 -0.04750875910492515 0.018798506752989913 -0.041677732049444083 -0.018999589451558618 -0.042980224941052796 -0.019027299194342758 -0.041196570281199059 -0.018935237239422937 -0.047508874772277755 -0.018797811199782855 -0.041677112343749108 -0.040918834428134557 -0.038822539996473296 -0.044344592483824719 -0.038004333863179598 -0.047647450767717515 -0.045162199253722154 -0.040472636472155619 -0.040648297723803524 -0.045238219346005665 -0.019118321011317323 -0.053441426421265904 -0.019314605816366796 -0.049871956475539291 -0.019330174841508268 -0.039563531902782709 -0.018916555611216662 -0.044563179103361918 0.018593964361384125 -0.052174138158230382 0.018454959169599886 -0.047124443186651599 0.018613342196631712 -0.038015752390979152 0.01881860757744035";
//  string params = "-0.055 0.0425 -0.06 0.0425 -0.065 0.039 -0.03 0.036 -0.02 0.037 -0.019 0.055 -0.015 0.037 -0.02 0.0501 0.025 0.037 0.013 0.055 0.025 0.055 0.01 0.037 0.0401 0.046 0.038 0.0465 0.05 0.047 0.037 0.037 0.075 0.03 0.085 0.025 0.085 0.02 0.037 0.01 0.08 -0.035 0.085 -0.04 0.095 -0.035 0.037 -0.04 0.02 -0.018 0.07 -0.015 0.095 -0.07 0.075 -0.037 0.035 -0.075 0.035 -0.018 0.04 -0.08 0.04 -0.037 -0.023 -0.015 -0.023 -0.015 -0.035 -0.08 -0.03 -0.09 -0.02 -0.0369 -0.075 -0.0369 -0.09 -0.041 -0.1 -0.037 -0.075 -0.0201 -0.09 -0.0205 -0.1 -0.0205 -0.1 -0.1 -0.075 0.0175 -0.09 0.02 -0.1 0.0175 -0.037 -0.1";

  CADCFDOptimisation optimiser;//(params);
  //optimiser.RunCADCFDOptimisationWithBFGSAndTraceMode(true);
  optimiser.RunCADCFDOptimisationWithLineSearch(true); //false
  //optimiser.WriteCADSensitivityToTextFile(42);
//  optimiser.occt.StepWriter("/home/mbanovic/IODA/Development/Ubend/2016-09-22/Ubend.step");
  return 0;
}
